version: '3.8'

services:
  # PostgreSQL - Main relational database
  postgres:
    image: postgres:15-alpine
    container_name: digitaltwin-postgres
    environment:
      POSTGRES_DB: digitaltwin
      POSTGRES_USER: digitaltwin
      POSTGRES_PASSWORD: DT2024SecurePass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U digitaltwin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digitaltwin-network

  # Redis - Real-time cache
  redis:
    image: redis:7-alpine
    container_name: digitaltwin-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digitaltwin-network

  # InfluxDB - Time-series metrics database
  influxdb:
    image: influxdb:2.7-alpine
    container_name: digitaltwin-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: DT2024SecurePass
      DOCKER_INFLUXDB_INIT_ORG: digitaltwin
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: dt-super-secret-auth-token-2024
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - digitaltwin-network

  # Backend - FastAPI application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: digitaltwin-backend
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - INFLUX_HOST=influxdb
      - POSTGRES_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - digitaltwin-network

  # Frontend - React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: digitaltwin-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - digitaltwin-network


networks:
  digitaltwin-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
